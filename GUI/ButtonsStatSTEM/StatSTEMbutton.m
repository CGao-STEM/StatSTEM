classdef StatSTEMbutton 
% StatSTEMbutton - Abstract class for java buttons in StatSTEM GUI
%
    
%--------------------------------------------------------------------------
% This file is part of StatSTEM
%
% Copyright: 2018, EMAT, University of Antwerp
% Author: K. H. W. van den Bos
% License: Open Source under GPLv3
% Contact: sandra.vanaert@uantwerpen.be
%--------------------------------------------------------------------------
    properties
        width = 50; % Specify the width of a button in pixels
        tooltip = ''; % Tooltip string (appearing when mouse sticks on button)
        input = {''}; % Needed input to run this button (button will be disabled in StatSTEM if input is not present)
        optInput = {''}; % Optional input that can be given to function if available.
        output = {''}; % Specify the output that will be generated by the button (Empty means no new output results)
        actWhen = {}; % Specify the input value in the StatSTEM file that must be true/false to enable button {true/false, 'input....'}
        fgcolor = ''; % Foreground color
        bgcolor = ''; % background color
        margin = [2,2,2,2]; % Margin [top,left,bottom,right] pixels
        fitting = 0; % Indicate whether function is fitting and may be stopped by an abort button
        figStart = ''; % Figure to be shown before callback of button is runned (empty or non existing figure means no change)
        figOptStart = {''}; % Figure options to be shown before callback of button is runned (only works if figStart is defined)
        figEnd = ''; % Figure to be shown after callback of button is runned (empty or non existing figure means no change)
        figOptEnd = {''}; % Figure options to be shown after callback of button is runned (only works if figEnd is defined)
        reshowFigEnd = false; % Remake figure to be shown after callback (true, false(standard))
    end
    
    properties (Hidden)
        button = []; %Java reference
        height = 20; % Height of a button in pixels
        Focusable = true; % Is button focusable
        font = ''; % The character font (java font)
    end
    
    properties (Access = 'private',Hidden)
        cleanup
    end
    
    methods
        function obj = StatSTEMbutton
            obj.cleanup = onCleanup(@()delete(obj));
        end
        
        function obj = set.width(obj,value)
            % Make sure the width is a positive number
            if isa(value,'double') && value>0
                obj.width = value;
            else
                error('StatSTEMbutton: Width should be a positive number')
            end
            obj.button.setSize(java.awt.Dimension(obj.width,obj.height));
            obj.button.setPreferredSize(java.awt.Dimension(obj.width, obj.height));
            obj.button.setMaximumSize(java.awt.Dimension(obj.width, obj.height));    
        end
        
        function obj = set.height(obj,value)
            % Make sure the width is a positive number
            if isa(value,'double') && value>0
                obj.height = value;
            else
                error('StatSTEMbutton: Width should be a positive number')
            end
            obj.button.setSize(java.awt.Dimension(obj.width,obj.height));
            obj.button.setPreferredSize(java.awt.Dimension(obj.width, obj.height));
            obj.button.setMaximumSize(java.awt.Dimension(obj.width, obj.height));    
        end
        
        function obj = set.tooltip(obj,value)
            % Make sure the value is a string
            if isa(value,'char')
                obj.tooltip = value;
            else
                error('StatSTEMbutton: Tooltip should be a string')
            end
            obj.button.setToolTipText(value);
        end
        
        function obj = set.Focusable(obj,value)
            % Make sure the value is a logical
            if value==1 || value==0
                obj.Focusable = value==true;
            else
                error('StatSTEMbutton: Focusable should be a logical value')
            end
            obj.button.setFocusable(value)
        end
        
        function obj = set.input(obj,value)
            % Make sure the name is a string
            if isa(value,'char')
                obj.input = {value};
            elseif isa(value,'cell')
                N = length(value);
                for n=1:N
                    if ~isempty(value{n}) && ~isa(value{n},'char')
                        error(['StatSTEMbutton: input in cell number ',num2str(n),' should be a string'])
                    end
                end
                obj.input = value;
            else
                error('StatSTEMbutton: input should be a string or cell structure with string')
            end
        end
        
        function obj = set.optInput(obj,value)
            % Make sure the name is a string
            if isa(value,'char')
                obj.optInput = {value};
            elseif isa(value,'cell')
                N = length(value);
                for n=1:N
                    if ~isempty(value{n}) && ~isa(value{n},'char')
                        error(['StatSTEMbutton: optInput in cell number ',num2str(n),' should be a string'])
                    end
                end
                obj.optInput = value;
            else
                error('StatSTEMbutton: optInput should be a string or cell structure with string')
            end
        end
        
        function obj = set.output(obj,value)
            % Make sure the name is a string
            if isa(value,'char')
                obj.output = {value};
            elseif isa(value,'cell')
                N = length(value);
                for n=1:N
                    if ~isempty(value{n}) && ~isa(value{n},'char')
                        error(['StatSTEMbutton: output in cell number ',num2str(n),' should be a string'])
                    end
                end
                obj.output = value;
            else
                error('StatSTEMbutton: output should be a string or cell structure with string')
            end
        end
        
        function obj = set.actWhen(obj,value)
            % Make sure the name is a string
            if isa(value,'cell')
                obj.actWhen = value;
            else
                error('StatSTEMbutton: butSel should be a cell with first a logical value, than a string')
            end
        end
        
        function obj = set.fgcolor(obj,value)
            % Make sure the value is either empty or a 3x1 vector of
            % relative colors
            if isempty(value)
                % Nothing happens
                return
            elseif isa(value,'double') && max(value)<=1 && min(value)>=0 && (all(size(value)==[1 3]) || all(size(value)==[3 1]))
                obj.fgcolor = value;
            else
                error('StatSTEMbutton: color should be a 3x1 vector with relative colors (between 0 and 1)')
            end
            obj.button.setForeground(java.awt.Color(value(1),value(2),value(3)))
        end
        
        function obj = set.figStart(obj,value)
            % Make sure the value is a string
            if isa(value,'char')
                obj.figStart = value;
            else
                error('StatSTEMbutton: figStart should be a string')
            end
        end
        
        function obj = set.figOptStart(obj,value)
            % Make sure the value is a string
            if isa(value,'char')
                obj.figOptStart = {value};
            elseif isa(value,'cell')
                obj.figOptStart = value;
            else
                error('StatSTEMbutton: figOptStart should be a cell containing strings')
            end
        end
        
        
        function obj = set.figEnd(obj,value)
            % Make sure the value is a string
            if isa(value,'char')
                obj.figEnd = value;
            else
                error('StatSTEMbutton: figEnd should be a string')
            end
        end
        
        function obj = set.figOptEnd(obj,value)
            % Make sure the value is a string
            if isa(value,'char')
                obj.figOptEnd = {value};
            elseif isa(value,'cell')
                obj.figOptEnd = value;
            else
                error('StatSTEMbutton: figOptEnd should be a cell containing strings')
            end
        end
        
        function obj = set.reshowFigEnd(obj,value)
            if isa(value,'logical')
                obj.reshowFigEnd = value;
            elseif isa(value,'double') && (value==0 || value==1)
                obj.reshowFigEnd = value==1;
            else
                error('StatSTEMbutton: reshowFigEnd should be a logical')
            end
        end
        
        function obj = set.bgcolor(obj,value)
            % Make sure the value is either empty or a 3x1 vector of
            % relative colors
            if isempty(value)
                obj.bgcolor = value;
            elseif isa(value,'double') && max(value)<=1 && min(value)>=0 && (all(size(value)==[1 3]) || all(size(value)==[3 1]))
                obj.bgcolor = value;
            else
                error('StatSTEMbutton: color should be a 3x1 vector with relative colors (between 0 and 1)')
            end
            updateBGColor(obj)
        end
        
        function updateBGColor(obj)
            if isempty(obj.bgcolor)
                bgc = obj.button.getBackground;
            else
                value = obj.bgcolor;
                bgc = java.awt.Color(value(1),value(2),value(3));
            end
            obj.button.setBackground(bgc)
        end
        
        function font = get.font(obj)
            if ispc
                font = javax.swing.plaf.FontUIResource('Segoe UI',java.awt.Font.PLAIN,12);
            else
                font = java.awt.Font('Lucida Grande',java.awt.Font.PLAIN,10);
            end
        end
        
        function obj = set.margin(obj,value)
            if isa(value,'double') && (all(size(value)==[1 4]) || all(size(value)==[4 1]))
                obj.margin = value;
            else
                error('StatSTEMbutton: color should be a 4x1 vector with relative colors (between 0 and 1)')
            end
            obj.button.setMargin(java.awt.Insets(value(1),value(2),value(3),value(4)));
        end
    end
    
    methods (Hidden)
        function delete(obj)
            set(obj.button,'MouseEnteredCallback',[])
            set(obj.button,'MouseExitedCallback',[])
            get(obj.button)
        end
    end
end